#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Cwd;
use Pod::Usage;
use File::Path qw/mkpath/;
use Config;
use constant WIN32 => $^O eq 'MSWin32';
my $quote = WIN32 ? q/"/ : q/'/;

our $VERSION = '0.01';

GetOptions(
    'h|help' => \my $help,
);
pod2usage() if $help;

my $CPANM_URL = 'http://github.com/miyagawa/cpanminus/raw/master/cpanm';
my $LOCAL_LIB_URL = 'http://cpansearch.perl.org/src/APEIRON/local-lib-1.005001/lib/local/lib.pm';

@ARGV==1 or pod2usage;

&init_tools;&main;exit;

sub main {
    my $dest = shift @ARGV;
    setup($dest);
}

sub setup {
    my $dest = shift;
    $dest = Cwd::abs_path($dest);
    mkpath(
        "$dest", "$dest/lib/perl5/local/",
        "$dest/bin", { error => \my $err }
    );
    die @$err if @$err;

    {
        my $fname = "$dest/lib/perl5/local/lib.pm";
        my $content = get($LOCAL_LIB_URL);
        open my $fh, '>', $fname
            or die "oops $fname, $!";
        print $fh $content;
        close $fh;
        unshift @INC, "$dest/lib/perl5/";
    }
    {
        require local::lib;
        my $fname = "$dest/bin/activate";
        open my $ll_fh, '>', \my $local_lib_src
            or die "oops";
        {
            local *STDOUT = $ll_fh;
            local::lib->print_environment_vars_for($dest);
        }
        open my $fh, '>', $fname
            or die "cannot open file($fname): $!";
        my $src = <<'...';
# This file must be used with "source bin/activate" *from bash*
# you cannot run it directly

deactivate () {
    if [ -n "$_OLD_PL_PATH" ] ; then
        PATH="$_OLD_PL_PATH"
        export PATH
        unset _OLD_PL_PATH
    fi

    PERL5LIB="$_OLD_PL_PERL5LIB"
    export PERL5LIB
    unset _OLD_PL_PERL5LIB

    # This should detect bash and zsh, which have a hash command that must
    # be called to get it to forget past commands.  Without forgetting
    # past commands the $PATH changes we made may not be respected
    if [ -n "$BASH" -o -n "$ZSH_VERSION" ] ; then
        hash -r
    fi

    if [ -n "$_OLD_PL_PS1" ] ; then
        PS1="$_OLD_PL_PS1"
        export PS1
        unset _OLD_PL_PS1
    fi

    unset PL_ENV
    if [ ! "$1" = "nondestructive" ] ; then
    # Self destruct!
        unset -f deactivate
    fi
}

# unset irrelavent variables
deactivate nondestructive

PL_ENV=$(cd $(dirname $0)/..; pwd)
export PL_ENV

_OLD_PL_PATH="$PATH"
PATH="$PL_ENV/bin:$PATH"
export PATH

_OLD_PL_PS1="$PS1"
if [ "`basename \"$PL_ENV\"`" = "__" ] ; then
    # special case for Aspen magic directories
    # see http://www.zetadev.com/software/aspen/
    PS1="[`basename \`dirname \"$PL_ENV\"\``] $PS1"
else
    PS1="(`basename \"$PL_ENV\"`)$PS1"
fi
export PS1

_OLD_PL_PERL5LIB="$PERL5LIB"

<<<$^X>>> -I$PL_ENV/lib/perl5/ -Mlocal::lib=$PL_ENV > $PL_ENV/bin/setup_local_lib
source $PL_ENV/bin/setup_local_lib

# This should detect bash and zsh, which have a hash command that must
# be called to get it to forget past commands.  Without forgetting
# past commands the $PATH changes we made may not be respected
if [ -n "$BASH" -o -n "$ZSH_VERSION" ] ; then
    hash -r
fi
...
        $src =~ s/<<<(\$[A-Za-z_^]+)>>>/$1/gee;
        print {$fh} $src;
        close $fh;
    }

    {
        my $fname = "$dest/bin/cpanm-local";
        open my $fh, '>', $fname
            or die "cannot open file($fname): $!";
        my $cpanm = get($CPANM_URL);
        $cpanm =~ s{#!/usr/bin/env perl}{#!$^X\nuse FindBin;\nuse File::Spec;\nuse lib File::Spec->catfile(\$FindBin::Bin, '..', 'lib', 'perl5');use local::lib File::Spec->catfile(\$FindBin::Bin, '..');\n};
        print {$fh} $cpanm;
        close $fh;
        chmod 0755, $fname;
    }

    {
        my $fname = "$dest/bin/perl";
        open my $fh, '>', $fname
            or die "cannot open file($fname): $!";
        print {$fh} <<"...";
#!$^X
use FindBin;
use File::Spec;
exec '$^X', '-I' . File::Spec->catfile(\$FindBin::Bin, '..', 'lib', 'perl5'), '-Mlocal::lib=$dest', \@ARGV
...
        close $fh;
        chmod 0755, $fname;
    }
}

# taken from cpanminus
sub which {
    my($name) = @_;
    my $exe_ext = $Config{_exe};
    foreach my $dir(File::Spec->path){
        my $fullpath = File::Spec->catfile($dir, $name);
        if (-x $fullpath || -x ($fullpath .= $exe_ext)){
            if ($fullpath =~ /\s/ && $fullpath !~ /^$quote/) {
                $fullpath = "$quote$fullpath$quote"
            }
            return $fullpath;
        }
    }
    return;
}

sub init_tools {
    if (!$ENV{DEBUG_WGET} && eval { require LWP::Simple }) {
        *get = sub { LWP::Simple::get(@_) };
    } elsif (my $wget = which 'wget') {
        *get = sub {
            my($uri, $path) = @_;
            system($wget, '--quiet', $uri, '-O', '-') == 0;
        };
    } else {
        die "Cannot find LWP::Simple and wget.\n";
    }
}

__END__

=head1 SYNOPSIS

    % plenv ./env/

    % source ./env/bin/activate
    # going to the virtual environment.

    % ./env/bin/cpanm-local Plack
    # install CPAN module to virtual environment

    (env)% deactivate
    # back to normal state

=head1 DESCRIPTION

plenv creates virtual environment for perl5.

This script setting up L<local::lib> environment very easy.

=head1 SEE ALSO

virtualenv
