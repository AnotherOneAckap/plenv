#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Cwd;
use Pod::Usage;
use File::Path qw/mkpath/;
use Config;
use constant WIN32 => $^O eq 'MSWin32';
use File::Temp;
my $quote = WIN32 ? q/"/ : q/'/;

our $VERSION = '0.01';

GetOptions(
    'h|help' => \my $help,
);
pod2usage() if $help;

my $LOCAL_LIB_URL = 'http://cpansearch.perl.org/src/APEIRON/local-lib-1.005001/lib/local/lib.pm';

@ARGV==1 or pod2usage;

&main;exit;

sub main {
    my $dest = shift @ARGV;
    setup($dest);
}

sub setup {
    my $dest = shift;
    $dest = Cwd::abs_path($dest) || $dest;
    mkpath( [ "$dest", "$dest/lib/perl5/local/", "$dest/bin" ] );

    {
        my $fname = "$dest/lib/perl5/local/lib.pm";
        my $content =
          eval { require local::lib; slurp( '<', $INC{'local/lib.pm'} ) }
          || do { my $fh; -f 'inc/inc_local-lib/local/lib.pm' && open($fh, '<', 'inc/inc_local-lib/local/lib.pm') && do { local $/; <$fh> } }
          || do { init_tools(); get($LOCAL_LIB_URL) };
        write_file($fname, $content);
        unshift @INC, "$dest/lib/perl5/";
    }
    {
        require local::lib;
        my $fname = "$dest/bin/activate";
        open my $ll_fh, '>', \my $local_lib_src
            or die "oops";
        {
            local *STDOUT = $ll_fh;
            local::lib->print_environment_vars_for($dest);
        }
        my $src = <<'...';
# This file must be used with "source bin/activate" *from bash*
# you cannot run it directly

deactivate () {
    if [ -n "$_OLD_PL_PATH" ] ; then
        PATH="$_OLD_PL_PATH"
        export PATH
        unset _OLD_PL_PATH
    fi

    PERL5LIB="$_OLD_PL_PERL5LIB"
    export PERL5LIB
    unset _OLD_PL_PERL5LIB

    # This should detect bash and zsh, which have a hash command that must
    # be called to get it to forget past commands.  Without forgetting
    # past commands the $PATH changes we made may not be respected
    if [ -n "$BASH" -o -n "$ZSH_VERSION" ] ; then
        hash -r
    fi

    if [ -n "$_OLD_PL_PS1" ] ; then
        PS1="$_OLD_PL_PS1"
        export PS1
        unset _OLD_PL_PS1
    fi

    unset PL_ENV
    if [ ! "$1" = "nondestructive" ] ; then
    # Self destruct!
        unset -f deactivate
    fi
}

# unset irrelavent variables
deactivate nondestructive

PL_ENV=$(cd $(dirname $0)/..; pwd)
export PL_ENV

_OLD_PL_PATH="$PATH"
PATH="$PL_ENV/bin:$PATH"
export PATH

_OLD_PL_PS1="$PS1"
if [ "`basename \"$PL_ENV\"`" = "__" ] ; then
    # special case for Aspen magic directories
    # see http://www.zetadev.com/software/aspen/
    PS1="[`basename \`dirname \"$PL_ENV\"\``] $PS1"
else
    PS1="(`basename \"$PL_ENV\"`)$PS1"
fi
export PS1

_OLD_PL_PERL5LIB="$PERL5LIB"

<<<$^X>>> -I$PL_ENV/lib/perl5/ -Mlocal::lib=$PL_ENV > $PL_ENV/bin/setup_local_lib
source $PL_ENV/bin/setup_local_lib

# This should detect bash and zsh, which have a hash command that must
# be called to get it to forget past commands.  Without forgetting
# past commands the $PATH changes we made may not be respected
if [ -n "$BASH" -o -n "$ZSH_VERSION" ] ; then
    hash -r
fi
...
        $src =~ s/<<<(\$[A-Za-z_^]+)>>>/$1/gee;
        write_file($fname, $src);
    }

    {
        my $fname = "$dest/bin/cpanm";
        my $cpanm = which('cpanm');
        if ($cpanm) {
            my $src = <<'...';
#!<<<$^X>>>
exec '<<<$cpanm>>>', '-l', '<<<$dest>>>', @ARGV;
die "cannot exec: $!";
...
            $src =~ s/<<<(\$[A-Za-z_^]+)>>>/$1/gee;
            write_file($fname, $src);
            chmod 0755, $fname;
        }
    }

    {
        mk_perl($dest)
    }
}

sub mk_perl {
    my ($dest) = @_;
    # Meant to mimic the shell command
    #     exec perl -Mperl5i::latest "$@"
    #
    # This is a C program so it works in a #! line.

    my $src = <<'...';
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

int main (int argc, char* argv[]) {
    int i;
    const char* perl_cmd = "<<<$^X>>>";
    char* perl_args[argc+1];
    perl_args[0] = argv[0];
    perl_args[1] = "-I<<<$p1>>>";
    perl_args[2] = "-I<<<$p2>>>";

    for( i = 1;  i < argc;  i++ ) {
        #if defined(WIN32)
            /* Windows arguments aren't really a list but a single string,
             * execv() fakes it, so we need to put the quotes back.
             */
            char* wrapped_arg = (char *)malloc( strlen(argv[i]) + 3 );
            sprintf(wrapped_arg, "\"%%s\"", argv[i]);
            perl_args[i+2] = wrapped_arg;
        #else
            perl_args[i+2] = argv[i];
        #endif
    }

    /* Argument array must be terminated by a null */
    perl_args[argc+2] = (char *)NULL;

    return execv( perl_cmd, perl_args );
}
...
    my $p1 = local::lib->install_base_perl_path($dest);
    my $p2 = local::lib->install_base_arch_path($dest);
    $src =~ s/<<<(\$[A-Za-z0-9_^]+)>>>/$1/gee;

    my $fh = File::Temp->new(UNLINK => 1, SUFFIX => '.c');
    print {$fh} $src;
    close $fh;

    system($Config{cc}, '-o', "$dest/bin/perl", $fh->filename) == 0
        or die "cannot compile 'perl' command";

    print "compiled $dest/bin/perl\n";
}

# taken from cpanminus
sub which {
    my($name) = @_;
    my $exe_ext = $Config{_exe};
    foreach my $dir(File::Spec->path){
        my $fullpath = File::Spec->catfile($dir, $name);
        if (-x $fullpath || -x ($fullpath .= $exe_ext)){
            if ($fullpath =~ /\s/ && $fullpath !~ /^$quote/) {
                $fullpath = "$quote$fullpath$quote"
            }
            return $fullpath;
        }
    }
    return;
}

sub init_tools {
    if (!$ENV{DEBUG_HTTP_LITE} && eval { require LWP::Simple }) {
        *get = sub { LWP::Simple::get(@_) };
    } else {
        die "Cannot find LWP::Simple.\n";
    }
}

sub write_file {
    my ($fname, $content) = @_;
    print "writing $fname\n";
    utf8::encode($content) if utf8::is_utf8($content);
    open my $fh, '>', $fname
        or die "cannot open file($fname): $!";
    print {$fh} $content;
    close $fh;
}

# my $content = slurp '<', $fname;
# my $content = slurp $fname;
sub slurp {
    if ( @_ == 1 ) {
        open( my $fh, '<', $_[0] ) or return;
        return do { local $/; <$fh> };
    }
    else {
        open( my $fh, @_ ) or return;    ## no critic.
        return do { local $/; <$fh> };
    }
}

__END__

=head1 SYNOPSIS

    % plenv ./env/

    % source ./env/bin/activate
    # going to the virtual environment.

    % ./env/bin/cpanm-local Plack
    # install CPAN module to virtual environment

    (env)% deactivate
    # back to normal state

=head1 DESCRIPTION

plenv creates virtual environment for perl5.

This script setting up L<local::lib> environment very easy.

=head1 SEE ALSO

virtualenv
