#!/usr/bin/perl
use strict;
use warnings;
use utf8;
use File::Spec::Functions qw(catfile catdir rel2abs);
use File::Basename;
use lib catdir(dirname(__FILE__), 'local', 'lib', 'perl5');
use Pod::Usage;
use File::Path qw(mkpath rmtree);
use Getopt::Long;
use Perl::Build;
use POSIX ();

my $PLENV_HOME;

&main;exit;

# -------------------------------------------------------------------------

sub main {
    my $cmd = shift @ARGV or CMD_help();
    $cmd =~ s/-/_/g;

    my $code = __PACKAGE__->can("CMD_$cmd");
    if ($code) {
        $code->();
    } else {
        die "Unknown command $cmd.";
    }
}

sub home_init {
    if ($ENV{PLENV_HOME}) {
        $PLENV_HOME = $ENV{PLENV_HOME};
    } elsif ($ENV{HOME}) {
        $PLENV_HOME = catdir($ENV{HOME}, ".plenv");
        $ENV{PLENV_HOME} = $PLENV_HOME;
    } else {
        die "There is no ENV[PLENV_HOME] and ENV[HOME]. Please set ENV{PLENV_HOME].";
    }
    mkpath("$PLENV_HOME/shims");
    mkpath("$PLENV_HOME/dists");
    mkpath("$PLENV_HOME/build");
    mkpath("$PLENV_HOME/versions");
}

sub CMD_rehash {
    home_init();
    rehash();
}

sub CMD_exec {
    home_init();

    my $bin = shift @ARGV or CMD_help();
    my $file = find_plenv_version_file();
    my $version = 'system';
    if ($file) {
        $version = slurp_version($file);
    }

    if ($version eq 'system') {
        # remove shims path from ENV[PATH].
        $ENV{PATH} = join(
            ':', 
            grep { File::Spec->canonpath($_) ne File::Spec->canonpath("$PLENV_HOME/shims/") } File::Spec->path()
        );
    } else {
        my $bindir = "$PLENV_HOME/versions/$version/bin/";
        unless (-x catfile($bindir, $bin)) {
            die "[plenv] There is no $bin in $bindir.(determined by @{[ $file || '-' ]})\n";
        }
        $ENV{PATH}="$bindir:$ENV{PATH}";
    }
    exec $bin, @ARGV;
    die $!;
}

sub CMD_version {
    home_init();

    my $file = find_plenv_version_file();
    if ($file) {
        my $version = slurp_version($file);
        print "$version (set by $file)\n";
    } else {
        print "system\n";
    }
}

sub slurp_version {
    my $fname = shift;
    open my $fh, '<', $fname or die "$fname: $!";
    my $version = do { local $/; <$fh> };
    $version =~ s/\s//g;
    $version;
}

sub find_plenv_version_file {
    my $file = find_local_plenv_version_file();
    return $file if $file;

    if (-f "$PLENV_HOME/version") {
        return "$PLENV_HOME/version";
    }
    return undef;
}

sub find_local_plenv_version_file {
    my $dir = Cwd::getcwd();
    my %seen;
    while (-d $dir) {
        return undef if $seen{$dir}++; # guard from deep recursion
        if (-f "$dir/.perl-version") {
            return "$dir/.perl-version";
        }
        $dir = dirname($dir);
    }
}

sub CMD_help {
    pod2usage();
}

sub CMD_global {
    home_init();

    my $version = shift @ARGV
        or pod2usage();

    write_version_file($version, "$PLENV_HOME/version");
}

sub CMD_local {
    home_init();

    my $version = shift @ARGV
        or pod2usage();

    write_version_file($version, "./.perl-version");
}

sub write_version_file {
    my ($version, $versionfile) = @_;
    $version =~ s/\s//g;

    unless (is_installed($version)) {
        die "$version is not installed on plenv.";
    }

    open my $fh, '>', $versionfile
        or die "$versionfile: $!";
    print $fh $version;
    close $fh;
}

sub CMD_install {
    home_init();

    if (@ARGV == 0) {
        CMD_help();
        exit(-1);
    }

    install();

    # rehash the ~/.plenv/shims/
    rehash();

    return;
}

sub install {
    my $stuff = shift @ARGV;

    my $installation_name;
    my $test;
    my (@D, @A, @U);
    Getopt::Long::Configure(
        'pass_through',
        'no_ignore_case',
        'bundling',
    );
    GetOptions(
        'test' => \$test,
        'as=s', \$installation_name,
        'D=s@' => \@D,
        'A=s@' => \@A,
        'U=s@' => \@U,
    );
    my @configure_options = @ARGV;
    unless (@configure_options) {
        push @configure_options, '-de';
    }

    for (@D, @A, @U) {
        for (@_) {
            s/^=//;
        }
    }

    push @configure_options, map { "-D$_" } @D;
    push @configure_options, map { "-A$_" } @A;
    push @configure_options, map { "-U$_" } @U;

    my $build_dir = catdir(File::Spec->tmpdir(), POSIX::strftime("perl-build-%Y%m%d-%H%M%S$$", localtime()));
    mkpath($build_dir);

    if ($stuff =~ /\.(gz|bz2)$/) {
        # install from file
        my $dist_tarball_path = $stuff;

        $installation_name ||= do {
            my $name = basename($dist_tarball_path);
            $name =~ s!\.tar\..+$!!; # remove ext
            $name =~ s!^perl-!!; # remove prefix
            $name;
        };

        if (is_installed( $installation_name )) {
            die "\nABORT: $installation_name is already installed.\n\n";
        }

        # -de means "use default settings without interactive questions"
        my $dst_path = catdir($PLENV_HOME, 'versions', $installation_name);
        Perl::Build->install_from_tarball(
            $dist_tarball_path => (
                build_dir => $build_dir,
                dst_path => $dst_path,
                configure_options => \@configure_options,
                patchperl => patchperl_cmd(),
                test => 0,
            )
        );

        Perl::Build->symlink_devel_executables(
            catdir($dst_path, 'bin'),
        );
    } else {
        # install from CPAN
        my $version = $stuff;
        $installation_name ||= $version;

        if (is_installed( $installation_name )) {
            die "\nABORT: $installation_name is already installed.\n\n";
        }

        if ($version =~ /^5\.1[13579]\./) {
            push @configure_options, '-Dusedevel';
        }

        my $dst_path = catdir($PLENV_HOME, 'versions', $installation_name);
        print "Install $version to $dst_path\n";
        Perl::Build->install_from_cpan(
            $version => (
                # tarball_dir => catdir($PLENV_HOME, 'dists'),
                build_dir => $build_dir,
                dst_path => $dst_path,
                configure_options => \@configure_options,
                patchperl => patchperl_cmd(),
                test => 0,
            )
        );
        Perl::Build->symlink_devel_executables(
            catdir($dst_path, 'bin'),
        );
    }

    # build dir was not useful after install successfully.
    rmtree($build_dir);
}

sub patchperl_cmd {
    [
        $^X,
        "-Mlib=@{[ rel2abs(dirname(__FILE__)) ]}/local/lib/perl5/",
        catfile( rel2abs(dirname(__FILE__)), "local/bin/patchperl" )
    ]
}

sub is_installed {
    my ($name) = @_;
    return grep { $name eq $_ } installed_perls();
}

sub CMD_list {
    home_init();
    print "$_\n" for installed_perls();
}

sub installed_perls {
    my $self    = shift;

    my @result;
    for (<$PLENV_HOME/versions/*>) {
        my ($name) = $_ =~ m/\/([^\/]+$)/;
        my $executable = catfile($_, 'bin', 'perl');

        push @result, $name;
    }

    return @result;
}

sub rehash {
    my %seen;
    for my $bin (map { basename($_) } grep { -x $_ } <$PLENV_HOME/versions/*/bin/*>) {
        next if $seen{$bin}++;

        my $shimbin = catfile($PLENV_HOME, 'shims', $bin);

        open my $fh, '>', $shimbin or die "$shimbin: $!";
        print $fh sprintf(<<'...', $PLENV_HOME, rel2abs($0));
#!/usr/bin/env bash
set -e
[ -n "$PLENV_DEBUG" ] && set -x

program="${0##*/}"
if [ "$program" = "perl" ]; then
  for arg; do
    case "$arg" in
    -e* | -- ) break ;;
    */* )
      if [ -f "$arg" ]; then
        export PLENV_DIR="${arg%%/*}"
        break
      fi
      ;;
    esac
  done
fi

export PLENV_ROOT="%s"
exec "%s" exec "$program" "$@"
...
        close $fh;

        chmod 0755, $shimbin or die "$shimbin: $!";
    }
}

sub CMD_install_cpanm {
    print("Installing cpanm to current perl\n");
    system("curl -L http://cpanmin.us | perl - --self-upgrade");
}

sub CMD_available {
    my @available = Perl::Build->available_perls();
    print $_, "\n" for @available;
}

__END__

=head1 SYNOPSIS

    plenv help

    # list available perl versions
    plenv available

    # install perl5 binary
    plenv install 5.16.2 -- -Dusethreads

    # execute command on current perl
    plenv exec ack

    # change global default perl to 5.16.2
    plenv global 5.16.2

    # change local perl to 5.14.0
    plenv local 5.14.0

    # run this command after install cpan module, contains executable script.
    plenv rehash

    # install cpanm to current perl
    plenv install-cpanm

=head1 INSTALLATION

    git clone ... ~/.plenv/

=head1 UPGRADE

    cd ~/.plenv/ && git pull origin master

=head1 SETUP

Push following command to your .zshrc.

    export PATH="$HOME/.plenv/shims:${PATH}"

=head1 DEPENDENCIES

  * Perl 5.8.1+
  * wget or curl or fetch.

=head1 HINTS

=over 4

=item How can I install cpanm?

Try to use following command.

    % plenv install-cpanm

=back
